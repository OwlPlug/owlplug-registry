name: Security

on:
  workflow_run:
    workflows: ["Pre-Analysis"]
    types:
      - completed

jobs:
  antivirus:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: 'Download pre analysis artifacts'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr-artifacts"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr-artifacts.zip`, Buffer.from(download.data));

      - name: 'Unzip artifacts'
        run: unzip pr-artifacts.zip

      - name: 'Verify bundles.json file and URL format'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')

            const validateUrl = function (str) {
              let urlRegex = /^(https):\/\/[^\s/$.?#].[^\s]*$/i;
              let url = new RegExp(urlRegex);
              if (!url.test(str)) {
                throw new Error(`Invalid url : ${str}`)
              }
            }

            let rawBundles = fs.readFileSync('bundles.json')
            let bundles = JSON.parse(rawBundles)

            for(let bundle of bundles) {
              validateUrl(bundle)
            }

      - name: Retrieve bundles url'
        id: bundles-url
        run: |
          BUNDLES_JSON=$(cat bundles.json)
          echo "$BUNDLES"
          echo "::set-output name=bundles::$BUNDLES_JSON"

      - name: Retrieve PR number'
        id: pr-number
        run: |
          PR_NUMBER=$(cat pr-number)
          echo "$PR_NUMBER"
          echo "::set-output name=pr-number::$PR_NUMBER"

      - name: "Download bundles files"
        id: bundles-download
        run: |
          readarray -t bundles <<<"$(jq -r '.[]' <<<'${{ steps.bundles-url.outputs.bundles }}')"
          path=()
          mkdir /tmp/bundles
          for bundle in ${bundles[@]}; do
            echo "Retrieving bundles ${bundle}."
            wget  --directory-prefix /tmp/bundles ${bundle}
          done

          files=(/tmp/bundles/*) 

          FILES_JSON=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${files[@]}")
          echo "::set-output name=paths::$FILES_JSON"

      - name: VirusTotal Scan
        id: vt-scan
        uses: crazy-max/ghaction-virustotal@v3
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: "${{join(fromJSON(steps.bundles-download.outputs.paths),'\n')}}"

      - uses: actions/github-script@v6
        env:
          VT_OUTPUT: ${{ steps.vt-scan.outputs.analysis }}
          PR_NUMBER: ${{ steps.pr-number.outputs.pr-number }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { VT_OUTPUT, PR_NUMBER } = process.env

            // Abort script if VT_OUTPUT is empty, null or undefined
            if (!VT_OUTPUT) {
              return;
            }

            let markdown = ""
            let files = VT_OUTPUT.split(",")

            for (let file of files) {
              markdown += "* " + file.replace("=https://", ": https://") + "\n";
            }

            github.rest.issues.createComment({
              issue_number: PR_NUMBER,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:shield: **Virus Total Analysis Report**
            ${markdown}`
            })
